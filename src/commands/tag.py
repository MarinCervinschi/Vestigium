from argparse import Namespace

from src.commands.show_ref import show_ref
from src.core.refs import RefDict, ref_list
from src.core.repository import repo_find, VesRepository
from src.core.objects import VesTag, object_find, object_write
from src.core.refs import ref_create


def cmd_tag(args: Namespace) -> None:
    """CLI command to create or list Ves tags.

    This command provides the interface for tag management in Ves. It can either
    create new tags (lightweight or annotated) or list existing tags in the
    repository. The behavior depends on whether a tag name is provided.

    Args:
        args (Namespace): Command line arguments containing:
            - name (Optional[str]): Name of the tag to create. If None, lists tags
            - object (str): Target object/commit for the new tag (used when name is provided)
            - create_tag_object (bool): Whether to create an annotated tag object
                                      or a lightweight tag reference

    Returns:
        None: Either creates a new tag or prints the list of existing tags

    Behavior:
        - If args.name is provided: Creates a new tag pointing to args.object
        - If args.name is None: Lists all existing tags in the repository

    Tag creation modes:
        - Lightweight tag (create_tag_object=False): Simple reference to commit
        - Annotated tag (create_tag_object=True): Full tag object with metadata

    Example:
        $ ves tag                          # List all tags
        $ ves tag v1.0 abc123             # Create lightweight tag
        $ ves tag -a v1.1 def456          # Create annotated tag

    Note:
        The function silently returns if not in a Ves repository.
        Tag listing shows tags without their SHA hashes for cleaner output.
    """
    repo = repo_find()
    if repo is None:
        return

    if args.name:
        tag_create(
            repo, args.name, args.object, create_tag_object=args.create_tag_object
        )
    else:
        refs = ref_list(repo)
        assert type(refs["tags"]) is RefDict
        show_ref(repo, refs["tags"], with_hash=False)


def tag_create(
    repo: VesRepository, name: str, ref: str, create_tag_object: bool = False
):
    """Create a Ves tag pointing to a specific commit or object.

    This function creates either a lightweight tag (just a reference) or an
    annotated tag (a full tag object with metadata). Annotated tags contain
    additional information like tagger name, date, and message.

    Args:
        repo (VesRepository): The repository to create the tag in
        name (str): Name of the tag to create (e.g., "v1.0", "release-2023")
        ref (str): Reference, hash, or object name that the tag should point to
        create_tag_object (bool, optional): If True, creates an annotated tag
                                          object with metadata. If False, creates
                                          a lightweight tag (just a reference).
                                          Defaults to False.

    Returns:
        None: The tag is created and stored in the repository

    Tag types:
        - Lightweight tag: Simple reference file pointing to a commit SHA
        - Annotated tag: Full object with metadata (tagger, message, date)

    Note:
        Annotated tags are stored as objects in the repository and contain
        a default tagger email and message. The tag reference is created
        under refs/tags/<name>.
    """
    sha = object_find(repo, ref)
    if sha is None:
        raise Exception(f"Cannot find object {ref}")

    if create_tag_object:
        tag = VesTag()
        tag.kvlm = dict()
        tag.kvlm[b"object"] = sha.encode()
        tag.kvlm[b"type"] = b"commit"
        tag.kvlm[b"tag"] = name.encode()

        tag.kvlm[b"tagger"] = b"Ves <ves@example.com>"
        # â€¦and a tag message!
        tag.kvlm[None] = (
            b"A tag generated by Ves, which won't let you customize the message!\n"
        )
        tag_sha = object_write(tag, repo)
        # create reference
        ref_create(repo, "tags/" + name, tag_sha)
    else:
        # create lightweight tag (ref)
        ref_create(repo, "tags/" + name, sha)
